// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(uuid())
  name String @unique
  password String @db.Text
  imageUrl String @db.Text
  servers Server[]
  members Member[]
  channels Channel[]
  tokens Token[]
  
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  
  }

model Token {
  id String @id @default(uuid())
  content String @db.VarChar(256) @unique
  
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())
  expireAt DateTime
  @@index([userId])
}

model Server {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  members Member[]
  channels Channel[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  
  @@index([userId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]

  conversationInitiated Conversation[] @relation("MemberOne")
  conversationReceived Conversation[] @relation("MemberTwo")
  

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  
  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}


model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  
  @@index([serverId])
  @@index([userId])
}

model Message {
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne",fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo",fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]
  
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt


  @@index([memberTwoId])
  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}